matrix_mul = __import__('100-matrix_mul').matrix_mul

# Valid test cases
matrix_mul([[1, 2], [3, 4]], [[2, 0], [1, 2]])
Expected:
    [[4, 4], [10, 8]]

matrix_mul([[1, 0, 2], [-1, 3, 1]], [[3, 1], [2, 1], [1, 0]])
Expected:
    [[5, 1], [4, 2]]

matrix_mul([[2, 3]], [[4], [5]])
Expected:
    [[23]]

matrix_mul([[1]], [[1]])
Expected:
    [[1]]

# Edge case: Multiplying identity matrices
matrix_mul([[1, 0], [0, 1]], [[1, 0], [0, 1]])
Expected:
    [[1, 0], [0, 1]]

# Edge case: Large numbers
matrix_mul([[100000, 200000], [300000, 400000]], [[1, 2], [3, 4]])
Expected:
    [[700000, 1000000], [1500000, 2200000]]

# Invalid test cases (should raise TypeError or ValueError)
try:
    matrix_mul("not a list", [[1, 2]])
except TypeError as e:
    print(e)
Expected:
    m_a must be a list

try:
    matrix_mul([[1, 2]], "not a list")
except TypeError as e:
    print(e)
Expected:
    m_b must be a list

try:
    matrix_mul([1, 2, 3], [[1, 2], [3, 4]])
except TypeError as e:
    print(e)
Expected:
    m_a must be a list of lists

try:
    matrix_mul([[1, 2], [3, "four"]], [[1, 2], [3, 4]])
except TypeError as e:
    print(e)
Expected:
    m_a should contain only integers or floats

try:
    matrix_mul([[1, 2]], [[3, 4, 5]])
except ValueError as e:
    print(e)
Expected:
    m_a and m_b can't be multiplied

try:
    matrix_mul([], [[1, 2], [3, 4]])
except ValueError as e:
    print(e)
Expected:
    m_a can't be empty

try:
    matrix_mul([[1, 2], [3, 4]], [[]])
except ValueError as e:
    print(e)
Expected:
    m_b can't be empty